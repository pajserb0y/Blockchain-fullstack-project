{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adressToAmoutFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbea5efeffbd661f61d52fb6e67d8bfc854286ea0f00b66561dd75b1b7991808c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "853023",
    "logsBloom": "0x
    "blockHash": "0xa4b2b30e7806e8412b42a703c15c45e5a132c79a524993a30b1a8d2636fd39e3",
    "transactionHash": "0xbea5efeffbd661f61d52fb6e67d8bfc854286ea0f00b66561dd75b1b7991808c",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "853023",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "6460e3751ca8a87d56e0d26428f6a976",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adressToAmoutFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//Get funds from users\\r\\n//Withdraw funds\\r\\n//Set a Minimum funding value in USD\\r\\n\\r\\n//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\nerror NotOwner();\\r\\n\\r\\ncontract FundMe {\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\r\\n    //less gas with constant\\r\\n\\r\\n    address[] public funders;\\r\\n    mapping(address => uint256) public adressToAmoutFunded;\\r\\n\\r\\n    address public immutable i_owner;\\r\\n\\r\\n    //less gas with immutable\\r\\n\\r\\n    AggregatorV3Interface public priceFeed;\\r\\n\\r\\n    constructor(address priceFeedAddress) {\\r\\n        i_owner = msg.sender; //msg.sender = one that deploys contract, for first time\\r\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    function fund() public payable {\\r\\n        //set minimum fund amout of USD\\r\\n        // 1.How do we send ETH to this contract\\r\\n        require(\\r\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\r\\n            \\\"Didn't send enough ETH\\\"\\r\\n        ); //1e18 == 1 * 10^18\\r\\n        //if condition is not met, require reverts everything done in the function!!!\\r\\n        //everythong before require spends gas, but for everything after gas is returned!!!\\r\\n        funders.push(msg.sender);\\r\\n        adressToAmoutFunded[msg.sender] = msg.value;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = funders[funderIndex];\\r\\n            adressToAmoutFunded[funder] = 0;\\r\\n        }\\r\\n        funders = new address[](0);\\r\\n        //transfer\\r\\n        //msg,sender = address\\r\\n        //payable(msg.sender) = payable address\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        //send\\r\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n        // require(sendSuccess, \\\"Send failed\\\");\\r\\n        //call\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call Failed\\\");\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == i_owner,\\\"Only owner can withdraw money\\\");\\r\\n        if (msg.sender != i_owner) {\\r\\n            revert NotOwner();\\r\\n        }\\r\\n        _; //this is where resto of the code of original function is going, it can also go before\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n    //If someone wants to send money to contract without fundMe\\r\\n}\\r\\n\",\"keccak256\":\"0x80631b7ebe60fbca2d2f13c7028be4ed147b44cac1aed6f49cf1a55127912963\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n//Library something like static class\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        //ABI (interface)\\r\\n        //Address of contract from data feeds on ChainLink, 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        //ETH in terms of USD\\r\\n        //price has 8 decimals and msg.value has 18 so you multiply with 10\\r\\n        return uint256(price * 1e10);\\r\\n    }\\r\\n\\r\\n    function getVersion() internal view returns (uint256) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n            0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        );\\r\\n        return priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        return (ethAmount * getPrice(priceFeed)) / 1e18;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x35b6cf831bf9d5133af3cafe5b37c0e9902c37af180241106e7b2e292ff03611\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f72380380610f7283398181016040528101906100329190610113565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e0826100b5565b9050919050565b6100f0816100d5565b81146100fb57600080fd5b50565b60008151905061010d816100e7565b92915050565b600060208284031215610129576101286100b0565b5b6000610137848285016100fe565b91505092915050565b60805160601c610e0d610165600039600081816102d401526105470152610e0d6000f3fe6080604052600436106100745760003560e01c8063b60d42881161004e578063b60d4288146100fa578063dba6335f14610104578063dc0d3dff1461012f578063f9d242e71461016c57610083565b80633ccfd60b1461008d5780636b69a592146100a4578063741bef1a146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d2565b005b3480156100b057600080fd5b506100b9610512565b6040516100c69190610751565b60405180910390f35b3480156100db57600080fd5b506100e461051f565b6040516100f191906107eb565b60405180910390f35b6101026101a9565b005b34801561011057600080fd5b50610119610545565b6040516101269190610827565b60405180910390f35b34801561013b57600080fd5b5061015660048036038101906101519190610873565b610569565b6040516101639190610827565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108cc565b6105a8565b6040516101a09190610751565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c090919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610956565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610357576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040257600080828154811061037c5761037b610976565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103fa906109d4565b91505061035a565b50600067ffffffffffffffff81111561041e5761041d610a1d565b5b60405190808252806020026020018201604052801561044c5781602001602082028036833780820191505090505b5060009080519060200190610462929190610691565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048990610a7d565b60006040518083038185875af1925050503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b505090508061050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690610ade565b60405180910390fd5b50565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061057957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b6000670de0b6b3a76400006105d4836105f1565b846105df9190610afe565b6105e99190610b87565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561063a57600080fd5b505afa15801561064e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190610c45565b5050509150506402540be400816106899190610cc0565b915050919050565b82805482825590600052602060002090810192821561070a579160200282015b828111156107095782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106b1565b5b509050610717919061071b565b5090565b5b8082111561073457600081600090555060010161071c565b5090565b6000819050919050565b61074b81610738565b82525050565b60006020820190506107666000830184610742565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107b16107ac6107a78461076c565b61078c565b61076c565b9050919050565b60006107c382610796565b9050919050565b60006107d5826107b8565b9050919050565b6107e5816107ca565b82525050565b600060208201905061080060008301846107dc565b92915050565b60006108118261076c565b9050919050565b61082181610806565b82525050565b600060208201905061083c6000830184610818565b92915050565b600080fd5b61085081610738565b811461085b57600080fd5b50565b60008135905061086d81610847565b92915050565b60006020828403121561088957610888610842565b5b60006108978482850161085e565b91505092915050565b6108a981610806565b81146108b457600080fd5b50565b6000813590506108c6816108a0565b92915050565b6000602082840312156108e2576108e1610842565b5b60006108f0848285016108b7565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682045544800000000000000000000600082015250565b60006109406016836108f9565b915061094b8261090a565b602082019050919050565b6000602082019050818103600083015261096f81610933565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109df82610738565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a1257610a116109a5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a67600083610a4c565b9150610a7282610a57565b600082019050919050565b6000610a8882610a5a565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610ac8600b836108f9565b9150610ad382610a92565b602082019050919050565b60006020820190508181036000830152610af781610abb565b9050919050565b6000610b0982610738565b9150610b1483610738565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b4d57610b4c6109a5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b9282610738565b9150610b9d83610738565b925082610bad57610bac610b58565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bd781610bb8565b8114610be257600080fd5b50565b600081519050610bf481610bce565b92915050565b6000819050919050565b610c0d81610bfa565b8114610c1857600080fd5b50565b600081519050610c2a81610c04565b92915050565b600081519050610c3f81610847565b92915050565b600080600080600060a08688031215610c6157610c60610842565b5b6000610c6f88828901610be5565b9550506020610c8088828901610c1b565b9450506040610c9188828901610c30565b9350506060610ca288828901610c30565b9250506080610cb388828901610be5565b9150509295509295909350565b6000610ccb82610bfa565b9150610cd683610bfa565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d1557610d146109a5565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d5257610d516109a5565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d8f57610d8e6109a5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dcc57610dcb6109a5565b5b82820290509291505056fea2646970667358221220690a42b49eadd7ae50e569df3710c01f0b5b4c4e265a7d33312f45ecd8d4ddf464736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063b60d42881161004e578063b60d4288146100fa578063dba6335f14610104578063dc0d3dff1461012f578063f9d242e71461016c57610083565b80633ccfd60b1461008d5780636b69a592146100a4578063741bef1a146100cf57610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d2565b005b3480156100b057600080fd5b506100b9610512565b6040516100c69190610751565b60405180910390f35b3480156100db57600080fd5b506100e461051f565b6040516100f191906107eb565b60405180910390f35b6101026101a9565b005b34801561011057600080fd5b50610119610545565b6040516101269190610827565b60405180910390f35b34801561013b57600080fd5b5061015660048036038101906101519190610873565b610569565b6040516101639190610827565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108cc565b6105a8565b6040516101a09190610751565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c090919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610956565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610357576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561040257600080828154811061037c5761037b610976565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806103fa906109d4565b91505061035a565b50600067ffffffffffffffff81111561041e5761041d610a1d565b5b60405190808252806020026020018201604052801561044c5781602001602082028036833780820191505090505b5060009080519060200190610462929190610691565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048990610a7d565b60006040518083038185875af1925050503d80600081146104c6576040519150601f19603f3d011682016040523d82523d6000602084013e6104cb565b606091505b505090508061050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690610ade565b60405180910390fd5b50565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061057957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090505481565b6000670de0b6b3a76400006105d4836105f1565b846105df9190610afe565b6105e99190610b87565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561063a57600080fd5b505afa15801561064e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190610c45565b5050509150506402540be400816106899190610cc0565b915050919050565b82805482825590600052602060002090810192821561070a579160200282015b828111156107095782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106b1565b5b509050610717919061071b565b5090565b5b8082111561073457600081600090555060010161071c565b5090565b6000819050919050565b61074b81610738565b82525050565b60006020820190506107666000830184610742565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107b16107ac6107a78461076c565b61078c565b61076c565b9050919050565b60006107c382610796565b9050919050565b60006107d5826107b8565b9050919050565b6107e5816107ca565b82525050565b600060208201905061080060008301846107dc565b92915050565b60006108118261076c565b9050919050565b61082181610806565b82525050565b600060208201905061083c6000830184610818565b92915050565b600080fd5b61085081610738565b811461085b57600080fd5b50565b60008135905061086d81610847565b92915050565b60006020828403121561088957610888610842565b5b60006108978482850161085e565b91505092915050565b6108a981610806565b81146108b457600080fd5b50565b6000813590506108c6816108a0565b92915050565b6000602082840312156108e2576108e1610842565b5b60006108f0848285016108b7565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682045544800000000000000000000600082015250565b60006109406016836108f9565b915061094b8261090a565b602082019050919050565b6000602082019050818103600083015261096f81610933565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109df82610738565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a1257610a116109a5565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a67600083610a4c565b9150610a7282610a57565b600082019050919050565b6000610a8882610a5a565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610ac8600b836108f9565b9150610ad382610a92565b602082019050919050565b60006020820190508181036000830152610af781610abb565b9050919050565b6000610b0982610738565b9150610b1483610738565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b4d57610b4c6109a5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b9282610738565b9150610b9d83610738565b925082610bad57610bac610b58565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bd781610bb8565b8114610be257600080fd5b50565b600081519050610bf481610bce565b92915050565b6000819050919050565b610c0d81610bfa565b8114610c1857600080fd5b50565b600081519050610c2a81610c04565b92915050565b600081519050610c3f81610847565b92915050565b600080600080600060a08688031215610c6157610c60610842565b5b6000610c6f88828901610be5565b9550506020610c8088828901610c1b565b9450506040610c9188828901610c30565b9350506060610ca288828901610c30565b9250506080610cb388828901610be5565b9150509295509295909350565b6000610ccb82610bfa565b9150610cd683610bfa565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d1557610d146109a5565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d5257610d516109a5565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d8f57610d8e6109a5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dcc57610dcb6109a5565b5b82820290509291505056fea2646970667358221220690a42b49eadd7ae50e569df3710c01f0b5b4c4e265a7d33312f45ecd8d4ddf464736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "adressToAmoutFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}