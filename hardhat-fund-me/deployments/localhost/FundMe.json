{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x69df06c63ee872e66406f2702d0060c8d353104d15479a03885410d5aee6ff7d",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1046459",
        "logsBloom": "0x
        "blockHash": "0x96143a5c1b79770b911297ed343ffdf69e6eab25d422375e87a96108ba4b81a7",
        "transactionHash": "0x69df06c63ee872e66406f2702d0060c8d353104d15479a03885410d5aee6ff7d",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1046459",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "f6148555e8f3422ea8ec432179390433",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Marko Nikolic\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as out library\"}},\"title\":\"Contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a ample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//Get funds from users\\r\\n//Withdraw funds\\r\\n//Set a Minimum funding value in USD\\r\\n\\r\\n//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n//FUNCTIONS ORDER:\\r\\n//CONSTRUCTOR\\r\\n//RECEIVE\\r\\n//FALLBACK\\r\\n//EXTERNAL\\r\\n//PUBLIC\\r\\n//INTERNAL\\r\\n//PRIVATE\\r\\n//VIEW/PURE\\r\\n\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n/// @title Contract for crowd funding\\r\\n/// @author Marko Nikolic\\r\\n/// @notice This contract is to demo a ample funding contract\\r\\n/// @dev This implements price feeds as our library\\r\\ncontract FundMe {\\r\\n    //Type declarations\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    //STATE VARIABLES (STORAGE VARIABLES)\\r\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\r\\n    //less gas with constant\\r\\n    address[] private s_funders;\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n    address private immutable i_owner;\\r\\n    //less gas with immutable\\r\\n    AggregatorV3Interface private s_priceFeed;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == i_owner,\\\"Only owner can withdraw money\\\");\\r\\n        if (msg.sender != i_owner) {\\r\\n            revert FundMe__NotOwner();\\r\\n        }\\r\\n        _; //this is where resto of the code of original function is going, it can also go before\\r\\n    }\\r\\n\\r\\n    constructor(address priceFeedAddress) {\\r\\n        i_owner = msg.sender; //msg.sender = one that deploys contract, for first time\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    //If someone wants to send money to contract without fundMe\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    /// @notice This function funds this contract\\r\\n    /// @dev This implements price feeds as out library\\r\\n    function fund() public payable {\\r\\n        //set minimum fund amout of USD\\r\\n        // 1.How do we send ETH to this contract\\r\\n        require(\\r\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\r\\n            \\\"Didn't send enough ETH\\\"\\r\\n        ); //1e18 == 1 * 10^18\\r\\n        //if condition is not met, require reverts everything done in the function!!!\\r\\n        //everythong before require spends gas, but for everything after gas is returned!!!\\r\\n        s_funders.push(msg.sender);\\r\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < s_funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        //transfer\\r\\n        //msg,sender = address\\r\\n        //payable(msg.sender) = payable address\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        //send\\r\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n        // require(sendSuccess, \\\"Send failed\\\");\\r\\n        //call\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call Failed\\\");\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public payable onlyOwner {\\r\\n        address[] memory funders = s_funders;\\r\\n        //mapings can't be in memmory\\r\\n\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"Call failed\\\");\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getFunder(uint256 index) public view returns (address) {\\r\\n        return s_funders[index];\\r\\n    }\\r\\n\\r\\n    function getAddressToAmountFunded(address funder)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_addressToAmountFunded[funder];\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xab9e38bb6425f996a8cbbaade6370abf8ca58c173ffb811d87d62d4a1cc65c57\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n//Library something like static class\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        //ABI (interface)\\r\\n        //Address of contract from data feeds on ChainLink, 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        //ETH in terms of USD\\r\\n        //price has 8 decimals and msg.value has 18 so you multiply with 10\\r\\n        return uint256(price * 1e10);\\r\\n    }\\r\\n\\r\\n    function getVersion() internal view returns (uint256) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n            0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n        );\\r\\n        return priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        return (ethAmount * getPrice(priceFeed)) / 1e18;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x35b6cf831bf9d5133af3cafe5b37c0e9902c37af180241106e7b2e292ff03611\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b506040516200131938038062001319833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611193620001866000396000818161033201528181610581015281816105d101526107c701526111936000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ab5565b6102e7565b6040516100cc9190610afb565b60405180910390f35b3480156100e157600080fd5b506100ea610330565b005b3480156100f857600080fd5b50610101610570565b60405161010e9190610afb565b60405180910390f35b34801561012357600080fd5b5061012c61057d565b6040516101399190610b25565b60405180910390f35b34801561014e57600080fd5b506101576105a5565b6040516101649190610b9f565b60405180910390f35b6101756101be565b005b61017f6105cf565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610be6565b610893565b6040516101b59190610b25565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108da90919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c70565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104605760008082815481106103da576103d9610c90565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045890610cee565b9150506103b8565b50600067ffffffffffffffff81111561047c5761047b610d37565b5b6040519080825280602002602001820160405280156104aa5781602001602082028036833780820191505090505b50600090805190602001906104c09291906109ab565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e790610d97565b60006040518083038185875af1925050503d8060008114610524576040519150601f19603f3d011682016040523d82523d6000602084013e610529565b606091505b505090508061056d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056490610df8565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610654576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106d757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161068d575b5050505050905060005b81518110156107625760008282815181106106ff576106fe610c90565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075a90610cee565b9150506106e1565b50600067ffffffffffffffff81111561077e5761077d610d37565b5b6040519080825280602002602001820160405280156107ac5781602001602082028036833780820191505090505b50600090805190602001906107c29291906109ab565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080990610d97565b60006040518083038185875af1925050503d8060008114610846576040519150601f19603f3d011682016040523d82523d6000602084013e61084b565b606091505b505090508061088f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088690610e64565b60405180910390fd5b5050565b60008082815481106108a8576108a7610c90565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000670de0b6b3a76400006108ee8361090b565b846108f99190610e84565b6109039190610f0d565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095457600080fd5b505afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190610fcb565b5050509150506402540be400816109a39190611046565b915050919050565b828054828255906000526020600020908101928215610a24579160200282015b82811115610a235782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109cb565b5b509050610a319190610a35565b5090565b5b80821115610a4e576000816000905550600101610a36565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8282610a57565b9050919050565b610a9281610a77565b8114610a9d57600080fd5b50565b600081359050610aaf81610a89565b92915050565b600060208284031215610acb57610aca610a52565b5b6000610ad984828501610aa0565b91505092915050565b6000819050919050565b610af581610ae2565b82525050565b6000602082019050610b106000830184610aec565b92915050565b610b1f81610a77565b82525050565b6000602082019050610b3a6000830184610b16565b92915050565b6000819050919050565b6000610b65610b60610b5b84610a57565b610b40565b610a57565b9050919050565b6000610b7782610b4a565b9050919050565b6000610b8982610b6c565b9050919050565b610b9981610b7e565b82525050565b6000602082019050610bb46000830184610b90565b92915050565b610bc381610ae2565b8114610bce57600080fd5b50565b600081359050610be081610bba565b92915050565b600060208284031215610bfc57610bfb610a52565b5b6000610c0a84828501610bd1565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682045544800000000000000000000600082015250565b6000610c5a601683610c13565b9150610c6582610c24565b602082019050919050565b60006020820190508181036000830152610c8981610c4d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cf982610ae2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d2c57610d2b610cbf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d81600083610d66565b9150610d8c82610d71565b600082019050919050565b6000610da282610d74565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610de2600b83610c13565b9150610ded82610dac565b602082019050919050565b60006020820190508181036000830152610e1181610dd5565b9050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e4e600b83610c13565b9150610e5982610e18565b602082019050919050565b60006020820190508181036000830152610e7d81610e41565b9050919050565b6000610e8f82610ae2565b9150610e9a83610ae2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ed357610ed2610cbf565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f1882610ae2565b9150610f2383610ae2565b925082610f3357610f32610ede565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f5d81610f3e565b8114610f6857600080fd5b50565b600081519050610f7a81610f54565b92915050565b6000819050919050565b610f9381610f80565b8114610f9e57600080fd5b50565b600081519050610fb081610f8a565b92915050565b600081519050610fc581610bba565b92915050565b600080600080600060a08688031215610fe757610fe6610a52565b5b6000610ff588828901610f6b565b955050602061100688828901610fa1565b945050604061101788828901610fb6565b935050606061102888828901610fb6565b925050608061103988828901610f6b565b9150509295509295909350565b600061105182610f80565b915061105c83610f80565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561109b5761109a610cbf565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110d8576110d7610cbf565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561111557611114610cbf565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561115257611151610cbf565b5b82820290509291505056fea2646970667358221220a1c5f1e7bc10a1dcecbb9552a1004087907a99fbabb980445ac6a0535cf0e2ad64736f6c63430008080033",
    "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ab5565b6102e7565b6040516100cc9190610afb565b60405180910390f35b3480156100e157600080fd5b506100ea610330565b005b3480156100f857600080fd5b50610101610570565b60405161010e9190610afb565b60405180910390f35b34801561012357600080fd5b5061012c61057d565b6040516101399190610b25565b60405180910390f35b34801561014e57600080fd5b506101576105a5565b6040516101649190610b9f565b60405180910390f35b6101756101be565b005b61017f6105cf565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610be6565b610893565b6040516101b59190610b25565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108da90919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c70565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104605760008082815481106103da576103d9610c90565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045890610cee565b9150506103b8565b50600067ffffffffffffffff81111561047c5761047b610d37565b5b6040519080825280602002602001820160405280156104aa5781602001602082028036833780820191505090505b50600090805190602001906104c09291906109ab565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e790610d97565b60006040518083038185875af1925050503d8060008114610524576040519150601f19603f3d011682016040523d82523d6000602084013e610529565b606091505b505090508061056d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056490610df8565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610654576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106d757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161068d575b5050505050905060005b81518110156107625760008282815181106106ff576106fe610c90565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075a90610cee565b9150506106e1565b50600067ffffffffffffffff81111561077e5761077d610d37565b5b6040519080825280602002602001820160405280156107ac5781602001602082028036833780820191505090505b50600090805190602001906107c29291906109ab565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080990610d97565b60006040518083038185875af1925050503d8060008114610846576040519150601f19603f3d011682016040523d82523d6000602084013e61084b565b606091505b505090508061088f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088690610e64565b60405180910390fd5b5050565b60008082815481106108a8576108a7610c90565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000670de0b6b3a76400006108ee8361090b565b846108f99190610e84565b6109039190610f0d565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095457600080fd5b505afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190610fcb565b5050509150506402540be400816109a39190611046565b915050919050565b828054828255906000526020600020908101928215610a24579160200282015b82811115610a235782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109cb565b5b509050610a319190610a35565b5090565b5b80821115610a4e576000816000905550600101610a36565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8282610a57565b9050919050565b610a9281610a77565b8114610a9d57600080fd5b50565b600081359050610aaf81610a89565b92915050565b600060208284031215610acb57610aca610a52565b5b6000610ad984828501610aa0565b91505092915050565b6000819050919050565b610af581610ae2565b82525050565b6000602082019050610b106000830184610aec565b92915050565b610b1f81610a77565b82525050565b6000602082019050610b3a6000830184610b16565b92915050565b6000819050919050565b6000610b65610b60610b5b84610a57565b610b40565b610a57565b9050919050565b6000610b7782610b4a565b9050919050565b6000610b8982610b6c565b9050919050565b610b9981610b7e565b82525050565b6000602082019050610bb46000830184610b90565b92915050565b610bc381610ae2565b8114610bce57600080fd5b50565b600081359050610be081610bba565b92915050565b600060208284031215610bfc57610bfb610a52565b5b6000610c0a84828501610bd1565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682045544800000000000000000000600082015250565b6000610c5a601683610c13565b9150610c6582610c24565b602082019050919050565b60006020820190508181036000830152610c8981610c4d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cf982610ae2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d2c57610d2b610cbf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d81600083610d66565b9150610d8c82610d71565b600082019050919050565b6000610da282610d74565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610de2600b83610c13565b9150610ded82610dac565b602082019050919050565b60006020820190508181036000830152610e1181610dd5565b9050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e4e600b83610c13565b9150610e5982610e18565b602082019050919050565b60006020820190508181036000830152610e7d81610e41565b9050919050565b6000610e8f82610ae2565b9150610e9a83610ae2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ed357610ed2610cbf565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f1882610ae2565b9150610f2383610ae2565b925082610f3357610f32610ede565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f5d81610f3e565b8114610f6857600080fd5b50565b600081519050610f7a81610f54565b92915050565b6000819050919050565b610f9381610f80565b8114610f9e57600080fd5b50565b600081519050610fb081610f8a565b92915050565b600081519050610fc581610bba565b92915050565b600080600080600060a08688031215610fe757610fe6610a52565b5b6000610ff588828901610f6b565b955050602061100688828901610fa1565b945050604061101788828901610fb6565b935050606061102888828901610fb6565b925050608061103988828901610f6b565b9150509295509295909350565b600061105182610f80565b915061105c83610f80565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561109b5761109a610cbf565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110d8576110d7610cbf565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561111557611114610cbf565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561115257611151610cbf565b5b82820290509291505056fea2646970667358221220a1c5f1e7bc10a1dcecbb9552a1004087907a99fbabb980445ac6a0535cf0e2ad64736f6c63430008080033",
    "devdoc": {
        "author": "Marko Nikolic",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "This implements price feeds as out library"
            }
        },
        "title": "Contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function funds this contract"
            }
        },
        "notice": "This contract is to demo a ample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 63,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 67,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 72,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
